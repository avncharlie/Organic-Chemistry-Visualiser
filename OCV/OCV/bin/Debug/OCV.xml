<?xml version="1.0"?>
<doc>
<assembly>
<name>
OCV
</name>
</assembly>
<members>
<member name="M:OrganicChemistryVisualiser.Application.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="M:OrganicChemistryVisualiser.Application.Main">
	<summary>
Application Entry Point.
</summary>
</member><member name="T:OrganicChemistryVisualiser.Application">
	<summary>
Application
</summary>
</member><member name="M:OrganicChemistryVisualiser.MainWindow.InitializeComponent">
	<summary>
InitializeComponent
</summary>
</member><member name="T:OrganicChemistryVisualiser.MainWindow">
	<summary>
MainWindow
</summary>
</member><member name="M:OrganicChemistryVisualiser.IUPACParser.generateASTAlkaneBase(System.String,OrganicChemistryVisualiser.IUPACParser.Token[],System.Boolean,System.String[],OrganicChemistryVisualiser.IUPACParser.TokenDefinition[]@)">
	<summary>
 Given a the name of an organic compound or substituent fragment, an array of tokens representing this name, an array of 
 token definitions, an indication if the given name contains the main chain of the compound and the locants of the chain
 if it isn't, return an ASTAlkaneBase structure representing this object. Deals with nested main chains (complex substituents)
 recursively. Doesn't initialise the branches variable, used while rendering
 </summary>
	<param name="organicNameString">
 A string containing the name of the organic compound (used in error messages). In the case of a complex substituent, the
 complex substituent fragment is expected (e.g but-1-enyl)
 </param>
	<param name="nameTokens">An array of Token objects representing the name to be parsed</param>
	<param name="isMainChain">A boolean that is true if the given name contains the main chain, false if not</param>
	<param name="locants">
 An array containing the locants of the given complex substituent if not isMainChain
 e.g. for 2-butyl, locants = {2}
 If isMainChain, empty list should be given (e.g. {})
 </param>
	<param name="tokenDefinitions">An array of (generated) TokenDefinitions</param>
	<returns>
 If valid name, return an ASTAlkaneBase structure representing name
 If invalid name, return an ASTAlkaneBase structure with the isError boolean flag set as True with a generated error message
 present in the errorMessage variable
 </returns>
	<remarks>Should be called by the generateAST function, not by the user</remarks>
</member><member name="M:OrganicChemistryVisualiser.IUPACParser.generateAST(System.String,OrganicChemistryVisualiser.IUPACParser.Token[],OrganicChemistryVisualiser.IUPACParser.TokenDefinition[])">
	<summary>
 Generates an Abstract Syntax Tree in the format of an ASTRoot structure for a given organicCompound
 </summary>
	<param name="organicNameString">A string containing the name of the compound to be parsed</param>
	<param name="organicNameTokens">
 An array of Token structures representing the compound to be parsed. Can be generated with the generateTokens 
 function in this module.
 </param>
	<param name="tokenDefinitions">
 An array of TokenDefinition structures representing the definitions of tokens present in the organicNameTokens array.
 Can be generated with the generateTokenDefinitions function in this module.
 </param>
	<returns>
 Returns an ASTRoot structure representing the organicCompound. If the name is invalid, compoundTree.isError will be 
 true and compoundTree.errorMessage will contain the error message.
 </returns>
	<remarks>An ASTRoot structure representing the parsed organicCompound</remarks>
</member><member name="M:OrganicChemistryVisualiser.IUPACParser.generateFunctionalGroupChild(System.Xml.Linq.XElement)">
	<summary>
 Generates a FunctionalGroupChild from a XElement the functional group is stored in. Can handle recursive cases.
 Doesn't initialise branches.
 </summary>
	<param name="childXML">The XElement the child is stored in</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:OrganicChemistryVisualiser.IUPACParser.generateFunctionalGroupDefinitions(System.Xml.Linq.XElement)">
	<summary>
 Given the XElement of the XMl file containing the functional group definitions, parses them into a list of FunctionalGroupDefinition
 structures. Can handle recursive cases.
 </summary>
	<param name="allFunctionalGroupDefinitions">XElement containing functional group definitions file</param>
	<returns>An array of FunctionalGroupDefinitions containing the definitions of the </returns>
	<remarks></remarks>
</member><member name="M:OrganicChemistryVisualiser.IUPACParser.generateTokenDefinition(System.Xml.Linq.XElement,System.Xml.Linq.XElement)">
	<summary>
 Given a singular token definition as an XML node and all the token definitions in XML format, return a TokenDefinition
 structure representing the token definition. Handles unpacking regexes and expanding contained tokens within other tokens
 recursively.
 For more details regarding the parsing of XML, see the 'tokens.xml' file in the resources folder in the startup directory.
 </summary>
	<param name="tokenDefinitionXML">An XElement containing the token definition to be converted</param>
	<param name="allTokenDefinitionsXML">An XElement containing all token definitions (used when tokenDefinitionXML contains other tokens)</param>
	<returns>Returns a TokenDefinition representing tokenDefinitionXML</returns>
	<remarks>Works for recursive definitions and expanded regexes.</remarks>
</member><member name="M:OrganicChemistryVisualiser.IUPACParser.generateTokenDefinitions(System.Xml.Linq.XElement)">
	<summary>
 Given a XElement containing all token definitions in XML format, return an array of TokenDefinitions detailing given tokens.
 For more details regarding the parsing of XML, see the 'tokens.xml' file in the resources folder in the startup directory.
 </summary>
	<param name="allTokenDefinitionsXML">An XElement containing all tokens to be converted into a TokenDefinitions</param>
	<returns>An array of TokenDefinitions</returns>
	<remarks>Uses the createTokenDefinition function to create singular TokenDefinitions</remarks>
</member><member name="M:OrganicChemistryVisualiser.IUPACParser.generateTokens(System.String,OrganicChemistryVisualiser.IUPACParser.TokenDefinition[])">
	<summary>
 Given an organicName and a tokenDefinition list, tokenise it, meaning convert the organic name into an array of Token structures.
 The token array is then verified. If any error is encountered, returns the error in the form of an array of a single Token where
 type="ERROR" and value contains the error details.
 For more details regarding the parsing of XML, see the 'tokens.xml' file in the resources folder in the startup directory.
 </summary>
	<param name="organicName">A string containing the organicName to be tokenised</param>
	<param name="tokenDefinitions">An array of tokenDefinitions used to tokenise the name</param>
	<returns>An array of Token structures representing the organic name OR an array containing a single token whose type is ERROR and value contains an error message.</returns>
	<remarks>The createTokenDefinitions function can be used to generate tokenDefinitions</remarks>
</member><member name="M:OrganicChemistryVisualiser.IUPACRenderer.generatePolylineFromPoints(System.Windows.Point[])">
	<summary>
 Helper function used to convert an array of Points into a polyline
 </summary>
	<param name="points">the array of Points to be converted</param>
	<returns>a polyline representing the array of Points passed in</returns>
	<remarks></remarks>
</member><member name="M:OrganicChemistryVisualiser.IUPACRenderer.bubbleSortDescending(System.Int32[])">
	<summary>
 Helper function used to sort an integer array. Uses the bubble sort algorithm
 </summary>
	<param name="arr">the integer array to be sorted</param>
	<returns>an integer array containing the elements in the given integer array sorted in descending order</returns>
	<remarks></remarks>
</member><member name="M:OrganicChemistryVisualiser.IUPACRenderer.createFunctionalGroupChild(OrganicChemistryVisualiser.IUPACParser.FunctionalGroupChild[]@,OrganicChemistryVisualiser.IUPACRenderer.FunctionalGroupPoints@,OrganicChemistryVisualiser.IUPACParser.ConnectingBranches@,System.Windows.Point,System.Double,System.Double[],System.Double,System.Double)">
	<summary>
 Given an an array of IUPACParser.FunctionalGroupChild structures and a FunctionalGroupPoints structure passed by reference, 
 populate the latter with information from the FunctionGroupChild structure. Used to draw functional group substituents.
 Handles recursive children. Orientation is always assumed to be -
   branch 1: 90 deg (north)
   branch 2: 330 deg (30 deg south from east)
   branch 3: 210 deg (30 deg south from west)
   branch 4: in between branch 1 and 2
   branch 5: in between branch 1 and 3
   branch 6: in between branch 2 and 3
 </summary>
	<param name="children">
 The children to be drawn. Passed byref as the 'branches' attribute of the structure will be modified as the subroutine runs
 </param>
	<param name="output">
 The FunctionalGroupPoints structure to be filled. Passed byref as the main function is recursive, meaning all calls of the
 same function will be editing this same structure
 </param>
	<param name="parentBranches">
 The ConnectingBranches structure to be modified. Passed byref as it can be potentially used and modified by all calls of the
 function
 </param>
	<param name="connectionPoint">The point of contact the current child has with the parent, passed as a Point</param>
	<param name="bondLength">A double containing the bond length of bonds in this structure. Used for drawing</param>
	<param name="branchAngles">An array of doubles containing the angles of branches from 1-6 in radians</param>
	<param name="alkaneRise">
 A double containing the height (y) difference of a low point and high point on a straight chain alkane
 </param>
	<param name="alkEneYneLineYOffsetPercentage">
 A double containing the percentage of the height difference to be used to space out double bonds
 </param>
	<remarks>Not to be called directly - interfaced by the createSimpleSubstituent function</remarks>
</member><member name="M:OrganicChemistryVisualiser.IUPACRenderer.createSimpleSubstituent(OrganicChemistryVisualiser.IUPACParser.ASTAlkaneBase,System.Int32,OrganicChemistryVisualiser.IUPACParser.FunctionalGroupDefinition[],System.Double,OrganicChemistryVisualiser.IUPACRenderer.PointPath,System.Boolean)">
	<summary>
 The children to be drawn. Passed byref as the 'branches' attribute of the structure will be modified as the subroutine ----
 A function to generate a simple substituent as a FunctionalGroupPoint structure. Returns as an array in the case of a
 multiple locant simple substituent.
 </summary>
	<param name="ast">The AST of the whole organic compound</param>
	<param name="simpleSubstituentIndex">The index of the substituent to be created in the ast.simpleSubstituents array</param>
	<param name="functionalGroupDefinitions">An array of functionalGroupDefinitions, used to draw functional groups</param>
	<param name="bondLength">A double containing the bond length of bonds in this structure. Used for drawing</param>
	<param name="mainChainPointPath">The PointPath of the main chain. Used for positioning to attach substituents</param>
	<param name="alkaneStartsRising">A boolean to be set true if the alkane is drawn with the first carbon pair rising</param>
	<returns>
 An array of FunctionalGroupPoints representing the given simpleSubstituents. The array only contain one element unless the
 substituent specified had more than one locant position</returns>
	<remarks></remarks>
</member><member name="M:OrganicChemistryVisualiser.IUPACRenderer.exportCanvasAsImage(System.Windows.Controls.Canvas,System.String,System.String)">
	<summary>
 Given a canvas element, a filetype of either png or jpg, and a file path, export the canvas as an image
 Can be used with a rendered AST canvas to export a rendered organicCompound
 </summary>
	<param name="canvas">The canvas to be rendered</param>
	<param name="fileType">A string containing either 'png' or 'jpg' signifying whether the image should be exported in PNG or JPEG format</param>
	<param name="filePath">The path the image should be exported to. Existing images with the same name will be overwritten</param>
	<remarks></remarks>
</member><member name="P:OrganicChemistryVisualiser.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:OrganicChemistryVisualiser.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:OrganicChemistryVisualiser.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="P:OrganicChemistryVisualiser.My.MyWpfExtension.Application">
	<summary>
 Returns the application object for the running application
 </summary>
</member><member name="P:OrganicChemistryVisualiser.My.MyWpfExtension.Computer">
	<summary>
 Returns information about the host computer.
 </summary>
</member><member name="P:OrganicChemistryVisualiser.My.MyWpfExtension.User">
	<summary>
 Returns information for the current user.  If you wish to run the application with the current 
 Windows user credentials, call My.User.InitializeWithWindowsUser().
 </summary>
</member><member name="P:OrganicChemistryVisualiser.My.MyWpfExtension.Log">
	<summary>
 Returns the application log. The listeners can be configured by the application's configuration file.
 </summary>
</member><member name="P:OrganicChemistryVisualiser.My.MyWpfExtension.Windows">
	<summary>
 Returns the collection of Windows defined in the project.
 </summary>
</member><member name="T:OrganicChemistryVisualiser.My.MyWpfExtension">
	<summary>
 Module used to define the properties that are available in the My Namespace for WPF
 </summary>
	<remarks></remarks>
</member><member name="M:OrganicChemistryVisualiser.MainWindow.parseAndDisplay(System.String)">
	<summary>
 Given an organicName, uses the functions and subroutines present in IUPACParser and IUPACRenderer to display either an error for an incorrect name
 or a rendered picture of the compound
 </summary>
	<param name="organicName">A string containing the name to be rendered</param>
	<remarks></remarks>
</member><member name="M:OrganicChemistryVisualiser.MainWindow.textBox_userInput_setPlaceHolderText(System.Object,System.Windows.RoutedEventArgs)">
	<summary>
 Sets the placeholder text 'Enter IUPAC name' to the user input textbox (textBox_userInput) when it loses focus. Also makes the text italic and gray.
 </summary>
	<param name="sender">TextBox - sent automatically</param>
	<param name="e">System.Windows.RoutedEventArgs - sent automatically</param>
	<remarks></remarks>
</member><member name="M:OrganicChemistryVisualiser.MainWindow.textBox_userInput_removePlaceHolderText(System.Object,System.Windows.RoutedEventArgs)">
	<summary>
 Removes the placeholder text and all styling from it for normal use when clicked on by user.
 </summary>
	<param name="sender">TextBox - sent automatically</param>
	<param name="e">System.Windows.RoutedEventArgs - sent automatically</param>
	<remarks></remarks>
</member><member name="M:OrganicChemistryVisualiser.MainWindow.textBox_userInput_KeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
	<summary>
 When a name is entered to textBox_userInput and the user presses enter, this subroutine calls parseAndDisplay with the entered name
 </summary>
	<param name="sender">Handled by system - will be textBox_userInput</param>
	<param name="e">Handled by system - will a System.Windows.Input.KeyEventArgs with the key a user entered (keys that are not enter are ignored)</param>
	<remarks></remarks>
</member>
</members>
</doc>